name: Deploy T-Blog to GitHub Pages

on:
  push:
    branches:
      - master # 当代码推送到 'main' 分支时触发此工作流
        # 如果你的主分支是 'master'，请修改为 'master'
  workflow_dispatch: # 允许手动触发此工作流

permissions:
  contents: write # 允许访问仓库内容，用于部署到 GitHub Pages
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虚拟机运行此作业

    steps:
      - name: Checkout repository # 步骤1: 检出代码
        uses: actions/checkout@v3
        with:
          # 部署历史记录，peaceiris/actions-gh-pages 需要完整的历史记录
          # 如果你的仓库很大，可以考虑 shallow clone，但部署可能不稳定
          fetch-depth: 0

      - name: Set up Node.js # 步骤2: 设置 Node.js 环境
        uses: actions/setup-node@v3
        with:
          node-version: "22" # 指定 Node.js 版本，根据你的项目需求调整
          cache: "npm" # 使用 npm 缓存依赖，提高后续构建速度
          cache-dependency-path: "**/package-lock.json" # 缓存依赖文件路径

      - name: Install dependencies # 步骤3: 安装依赖
        run: npm install # 或者 'yarn install' 如果你使用 Yarn

      - name: Build project # 步骤4: 构建前端项目
        run: hexo clean && hexo generate

      - name: Deploy to GitHub Pages # 步骤5: 部署到 GitHub Pages
        uses: peaceiris/actions-gh-pages@v3 # 使用 peaceiris/actions-gh-pages Action
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # 这是一个由 GitHub 自动提供的 Token
          publish_dir:
            ./public # 指定构建好的静态文件目录，通常是 'dist'、'build' 或 'public'
            # 请确保替换为你的项目实际的构建输出目录

          # 可选配置项：
          # publish_branch: gh-pages # 默认是 gh-pages 分支，如果你的 GitHub Pages 使用不同分支，请指定
          # cname: example.com       # 如果你有自定义域名，可以在这里指定
          # user_name: 'github-actions[bot]' # 提交者名称
          # user_email: 'github-actions[bot]@users.noreply.github.com' # 提交者邮箱
